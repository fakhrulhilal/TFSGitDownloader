. "$PSScriptRoot\..\GitDownloader\GitDownloader.ps1"

Describe 'Save git repository' {
    If ((Get-Command -Name git -CommandType Application -ErrorAction Ignore) -eq $null) {
        If (-not (Test-Path -Path "$($env:ProgramFiles)\Git\bin\git.exe" -PathType Leaf)) {
            Write-Error "Git command line is required to run the test" -ErrorAction Stop
        }
        Set-Alias -Name git -Value $env:ProgramFiles\Git\bin\git.exe -Force | Out-Null        
    }
    $TestTempDir = "$Env:TEMP\GitDownloader.Tests"
    $DefaultGitRepositoryContainer = "$TestTempDir\DefaultGit"
    $DefaultGitUri = "$TestTempDir\TeamProject\_git"
    Mock Get-GitDirectory { return $DefaultGitRepositoryContainer }
    Mock Get-GitRepositoryUri { return $DefaultGitUri }
    Mock Test-SameTfsServer { return $false }
    # surpress any Write-Host output generated by tested function
    Mock Write-Host { }
    $CurrentWd = Get-Item -Path .
    Function New-Repository {
        param([string]$Path)
        $LastWd = Get-Item .
        New-Item -Path $Path -ItemType Directory -Force | Out-Null
        Set-Location -Path $Path
        git init 2>&1 | Out-Null
        Set-Content -Path firstfile.txt -Value 'first file'
        git add . 2>&1 | Out-Null
        git commit -m 'dummy fist file' 2>&1 | Out-Null
        Set-Location -Path $LastWd
    }
    Function Get-RemoteFetchUri {
        param([string]$Path)
        $LastWd = Get-Item .
        Set-Location -Path $Path
        $remoteUris = git remote -v
        $remoteUri = [regex]::Match($remoteUris, '^(\w+)\s(?<url>[^\s]+)\s\(fetch\)').Groups['url'].Value
        Set-Location -Path $LastWd

        Return $remoteUri
    }
    BeforeEach {
        New-Repository -Path $DefaultGitUri\source.git
    }
    AfterEach {
        Set-Location -Path $CurrentWd
        Remove-Item -Path $TestTempDir -Force -Recurse
    }
    It 'Expands $(Build.Repository.GitUri) to VSTS URI and team project' {
        Save-GitRepository -RepositoryUrl '$(Build.Repository.GitUri)\source.git' 

        Get-RemoteFetchUri -Path "$DefaultGitRepositoryContainer\source.git" | Should Be "$DefaultGitUri\source.git"
    }
    It 'Expands $(Build.GitDirectory) to default git directory' {
        Save-GitRepository -RepositoryUrl '$(Build.Repository.GitUri)\source.git' -RepositoryPath '$(Build.GitDirectory)\OtherThanSource'

        Test-Path $DefaultGitRepositoryContainer\OtherThanSource -PathType Container | Should Be $true
    }
    It 'Uses default git repository path when not specified' {
        Save-GitRepository -RepositoryUrl '$(Build.Repository.GitUri)\source.git'

        Test-Path -Path "$DefaultGitRepositoryContainer\source.git" -PathType Container | Should Be $true
    }
    It 'Uses specifed git repository path when specified' {
        New-Repository -Path $TestTempDir\Another\repo_source.git
        Save-GitRepository -RepositoryUrl "$TestTempDir\Another\repo_source.git"

        Get-RemoteFetchUri -Path "$DefaultGitRepositoryContainer\repo_source.git" | Should Be "$TestTempDir\Another\repo_source.git"
    }
    It 'Creates the default git directory container when not available' {
        Save-GitRepository -RepositoryUrl '$(Build.Repository.GitUri)\source.git'

        Test-Path -Path $DefaultGitRepositoryContainer -PathType Container | Should Be $true
        (Get-ChildItem -Path $DefaultGitRepositoryContainer -Directory).Name | Should Be 'source.git'
    }
    It 'Will use git clone command for existing git directory and asked to clean it' {
        New-Repository -Path "$DefaultGitRepositoryContainer\source.git"
        Set-Content -Path "$DefaultGitRepositoryContainer\source.git\dummy.txt" -Value 'Hello world'
        "$DefaultGitRepositoryContainer\source.git\dummy.txt" | Should -Exist
        Save-GitRepository -RepositoryUrl '$(Build.Repository.GitUri)\source.git' -Clean 'true'

        "$DefaultGitRepositoryContainer\source.git\dummy.txt" | Should -Not -Exist
    }
    It 'Will use git clone command for new git directory' {
        Mock Invoke-GitCloneRepository { }
        Save-GitRepository -RepositoryUrl '$(Build.Repository.GitUri)\source.git' 
 
        Assert-MockCalled Invoke-GitCloneRepository -Exactly 1
    }
    It 'Will stash and update existing git repository when git directory exists and not cleaning it' {
        git clone "$DefaultGitUri\source.git" "$DefaultGitRepositoryContainer\source.git" 2>&1 | Out-Null
        Set-Content -Path "$DefaultGitRepositoryContainer\source.git\dummy.txt" -Value 'Hello world'
        Save-GitRepository -RepositoryUrl '$(Build.Repository.GitUri)\source.git' -Clean 'false'
   
        "$DefaultGitRepositoryContainer\source.git\dummy.txt" | Should -Not -Exist
        Set-Location "$DefaultGitRepositoryContainer\source.git"
        git stash pop 2>&1 | Out-Null
        "$DefaultGitRepositoryContainer\source.git\dummy.txt" | Should -Exist
    }
}